{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMFvjakeciOEYGOILo0jo6Z"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"hi6LKbbdXm-w"},"outputs":[],"source":["from scipy.stats import norm\n","from sklearn.metrics import accuracy_score\n","\n","def probit(x):\n","    return [norm.cdf(x), norm.pdf(x), -x * norm.pdf(x)]\n","def logit(x):\n","    y = 1 / (1 + np.exp(-x))\n","    y2 = np.exp(-x) / (1 + np.exp(-x)) ** 2\n","    y3 = (np.exp(-2 * x) - np.exp(-x)) / (1 + np.exp(-x)) ** 3\n","    return [y, y2, y3]\n","def bhood(func, param, y, x):\n","    param = param.reshape(-1, 1)\n","    z = np.dot(x, param)\n","    g = func(z)\n","    u = y * np.log(g[0]) + (1 - y) * np.log(1 - g[0])\n","    u2 = np.sum(u, axis=0)\n","    v = (y * (g[1] / g[0])) * x - ((1 - y) * g[1] / (1 - g[0])) * x\n","    v2 = np.sum(v, axis=0)\n","    h = (g[0] * g[2] - g[1] ** 2) / g[0] ** 2\n","    h2 = (-(1 - g[0]) * g[2] - g[1] ** 2) / (1 - g[0]) ** 2\n","    w = np.dot(x.T, y * h * x) + np.dot(x.T, (1 - y) * h2 * x)\n","    return [u2, v2, w]\n","\n","class binary_regression:\n","    def __init__(self, mode=\"logit\", tol=1e-4):\n","        \"\"\"\n","        :param mode: \"logit\" or \"probit\"\n","        :param tol: Newton法の閾値\n","        \"\"\"\n","        self.mode = mode\n","        self.tol = tol\n","\n","        self.coef = None\n","        self.se = None\n","        self.t = None\n","        self.APE = None\n","        self.PEA = None\n","        self.likelihood = None\n","        self.n = None\n","        self.k = None\n","\n","    def _get_func(self):\n","        \"\"\"\n","        function を mode に応じて取得\n","        :return: func\n","        \"\"\"\n","        if self.mode == \"logit\":\n","            return logit\n","        elif self.mode == \"probit\":\n","            return probit\n","        else:\n","            raise NotImplementedError\n","\n","    def _get_z_y(self, x, y=None):\n","        \"\"\"\n","        - 説明変数 x, 目的変数 yの変数名の取得 (array形式の時は数字で代替)\n","        - 切片項の追加\n","        - array形式に変更\n","\n","        :param x: 説明変数\n","        :param y: 目的変数 (0 or 1)\n","        :return: z (const+x), y\n","        \"\"\"\n","        self.n, self.k = x.shape  # get N & K\n","        const = np.ones((self.n, 1))  # make constant val\n","\n","        if not isinstance(x, np.ndarray):  # get x names\n","            self.x_names = [\"const\"] + x.columns.tolist()\n","        else:\n","            self.x_names = [f\"x{i:02}\" for i in range(self.k + 1)]\n","\n","        z = np.hstack([const, np.array(x)])  # const. + x\n","        if y is None:  # y がなかったらzだけ返す\n","            return z\n","\n","        if not isinstance(y, np.ndarray):  # get y name\n","            self.y_name = y.name if isinstance(y, pd.Series) else y.columns[0]\n","        else:\n","            self.y_name = \"y\"\n","        y = np.array(y)\n","\n","        return z, y\n","\n","    def fit(self, x, y):\n","        \"\"\"\n","        Newton法を用いた推定(mle funcとほぼ同じ)\n","        メンバ変数に格納(coef, se, t, spe, pea, etc.)\n","        :param x: 目的変数\n","        :param y: 説明変数\n","        :return: None\n","        \"\"\"\n","        z, y = self._get_z_y(x, y)  # get z & y\n","        func = self._get_func()  # get func\n","\n","        param = np.zeros(z.shape[1])\n","        f = bhood(func, param, y, z)\n","        r = max(abs(f[1]))\n","\n","        while r > self.tol:\n","            param = param - np.dot(np.linalg.inv(f[2]), f[1])\n","            f = bhood(func, param, y, z)\n","            r = max(abs(f[1]))\n","\n","        self.coef = param\n","        self.coef_= param[1:]\n","        self.intercept_ = param[0]\n","        self.likelihood = f[0]\n","        self.se = np.sqrt(np.diag(np.linalg.inv(-f[2])))\n","        self.t = self.coef / self.se\n","        self.p = (1 - norm.cdf(abs(self.t)))*2\n","        u = func(np.dot(z, param.reshape(-1, 1)))\n","        self.APE = np.mean(u[1]) * param\n","        u = func(np.dot(np.mean(z, axis=0), param))\n","        self.PEA = u[1] * param\n","        return self\n","\n","    def predict(self, x):\n","        \"\"\"\n","        引数xとfitで推定したパラメータをもとに 1である予測確率を返す\n","        :param x: 説明変数\n","        :return: 予測確率(0~1)\n","        \"\"\"\n","        if x.shape[1] != self.k:\n","            raise ValueError\n","\n","        z = self._get_z_y(x)\n","        z = z @ self.coef\n","        func = self._get_func()\n","        return func(z)[0]\n","\n","    def summary(self):\n","        \"\"\"\n","        summaryの出力\n","        :return: summary dataframe\n","        \"\"\"\n","        col_names = [\"coef\", \"se\", \"t\", \"p\",\"PEA\", \"APE\"]\n","        output = pd.DataFrame(np.c_[self.coef, self.se, self.t, self.p, self.PEA, self.APE],\n","                              index=self.x_names,\n","                              columns=col_names)\n","        return output"]}]}